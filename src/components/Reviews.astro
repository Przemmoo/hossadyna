---
// Sekcja "Opinie" - opinie pacjentów
import { getCollection } from 'astro:content';

// Pobierz wszystkie opinie
const allReviews = await getCollection('reviews');

// Sortuj opinie według kolejności
const sortedReviews = allReviews.sort((a, b) => a.data.order - b.data.order);

// Funkcja do generowania gwiazdek
function generateStars(rating: number) {
  return '★'.repeat(rating) + '☆'.repeat(5 - rating);
}
---

<section id="reviews" class="reviews section">
  <div class="container">
    <h2>Co mówią pacjenci</h2>
    <p class="reviews-intro">
      Opinie moich pacjentów są dla mnie najważniejszą oceną mojej pracy. 
      Cieszę się, że mogę towarzyszyć im w procesie pozytywnych zmian.
    </p>
    
    <div class="reviews-carousel">
      <div class="reviews-container" id="reviews-container">
        {sortedReviews.map(async (review, index) => {
          const { Content } = await review.render();
          return (
            <div class={`review-slide ${index === 0 ? 'active' : ''}`} data-index={index}>
              <div class="review-content">
                <div class="stars">
                  {generateStars(review.data.rating)}
                </div>
                <blockquote class="review-text">
                  <Content />
                </blockquote>
                <div class="review-footer">
                  <div class="review-author">
                    <strong>{review.data.name}</strong>
                    <span class="author-info">{review.data.therapy}</span>
                  </div>
                  <div class="review-source">
                    <span>{review.data.source}</span>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
      
      {sortedReviews.length > 1 && (
        <>
          <button class="nav-btn nav-prev" id="nav-prev" aria-label="Poprzednia opinia">‹</button>
          <button class="nav-btn nav-next" id="nav-next" aria-label="Następna opinia">›</button>
          
          <div class="reviews-indicators">
            {sortedReviews.map((_, index) => (
              <button class={`indicator ${index === 0 ? 'active' : ''}`} data-slide={index}></button>
            ))}
          </div>
        </>
      )}
    </div>

    <div class="reviews-summary">
      <h3>Wszystkie opinie pochodzą z portalu ZnanyLekarz.pl</h3>
      <p>Autentyczne opinie zweryfikowanych pacjentów</p>
      
      <div class="external-link">
        <a 
          href="https://www.znanylekarz.pl/magdalena-hossadyna/psycholog-psychoterapeuta/wieliczka" 
          target="_blank" 
          rel="noopener noreferrer"
          class="btn"
        >
          Zobacz wszystkie opinie na ZnanyLekarz.pl
        </a>
      </div>
    </div>
  </div>
</section>

<style>
  h2 {
    text-align: center;
  }
  
  .reviews {
    background-color: var(--color-white);
  }

  .reviews-intro {
    text-align: center;
    font-size: 1.2rem;
    margin-bottom: 3rem;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
  }

  .reviews-carousel {
    position: relative;
    margin-bottom: 3rem;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

  .reviews-container {
    position: relative;
    height: 350px;
    overflow: hidden;
    border-radius: 20px;
    background: linear-gradient(135deg, var(--color-off-white) 0%, #f8f6f4 100%);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
  }

  .review-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transform: translateX(100px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem 2rem;
  }

  .review-slide.active {
    opacity: 1;
    transform: translateX(0);
    pointer-events: auto;
  }

  .review-slide.exit-left {
    transform: translateX(-100px);
    opacity: 0;
  }

  .review-content {
    text-align: center;
    max-width: 600px;
  }

  .quote-icon {
    font-size: 4rem;
    color: var(--color-dusty-pink);
    opacity: 0.3;
    position: absolute;
    top: -2rem;
    left: 50%;
    transform: translateX(-50%);
    font-family: Georgia, serif;
    line-height: 1;
  }

  .stars {
    color: #FFD700;
    font-size: 1.8rem;
    margin-top: -1rem;
  }

  .review-text {
    font-style: italic;
    font-size: 0.8rem;
    line-height: 1.6;
    margin-bottom: 1rem;
    color: var(--color-dark-graphite);
    position: relative;
    z-index: 2;
    max-height: 240px;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 10;
    -webkit-box-orient: vertical;
  }

  .review-text::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 0px;
    background: linear-gradient(transparent, var(--color-off-white));
    pointer-events: none;
  }

  .review-footer {
    border-top: 2px solid var(--color-dusty-pink);
    padding-top: 0.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .review-author strong {
    color: var(--color-dark-graphite);
    font-size: 1.0rem;
    display: block;
  }

  .author-info {
    font-size: 0.8rem;
    color: var(--color-dusty-pink);
    margin-top: 0.3rem;
    display: block;
  }

  .review-source {
    font-size: 0.85rem;
    color: var(--color-sage-green);
    font-weight: 600;
  }

  /* Navigation buttons */
  .nav-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 50px;
    height: 50px;
    border-radius: 50%;
    border: none;
    background: var(--color-dusty-pink);
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 5px 15px rgba(217, 175, 175, 0.4);
  }

  .nav-btn:hover {
    background: var(--color-sage-green);
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 8px 25px rgba(178, 187, 164, 0.5);
  }

  .nav-prev {
    left: -25px;
  }

  .nav-next {
    right: -25px;
  }

  .reviews-indicators {
    display: flex;
    justify-content: center;
    gap: 0.8rem;
    margin-top: 2rem;
  }

  .indicator {
    width: 14px;
    height: 14px;
    border-radius: 50%;
    border: none;
    background-color: rgba(217, 175, 175, 0.3);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
  }

  .indicator.active {
    background-color: var(--color-dusty-pink);
    transform: scale(1.2);
  }

  .indicator:hover {
    background-color: var(--color-dusty-pink);
    transform: scale(1.1);
  }

  .reviews-summary {
    background-color: var(--color-off-white);
    padding: 3rem;
    border-radius: 15px;
    text-align: center;
    margin-top: 3rem;
  }

  .reviews-summary h3 {
    color: var(--color-dark-graphite);
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .reviews-summary p {
    color: var(--color-sage-green);
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }

  .summary-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .stat {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .stat-number {
    font-size: 2.5rem;
    font-weight: bold;
    color: var(--color-dusty-pink);
    font-family: var(--font-heading);
  }

  .stat-label {
    font-size: 1rem;
    color: var(--color-dark-graphite);
    margin-top: 0.5rem;
  }

  .stat .stars {
    margin-top: 0.5rem;
    font-size: 1rem;
  }

 

  /* Mobile Styles */
  @media (max-width: 768px) {
    .reviews-container {
      height: 350px;
      margin: 0 1rem;
    }

    .review-slide {
      padding: 1.5rem;
    }

    .quote-icon {
      font-size: 3rem;
      top: -1.5rem;
    }

    .stars {
      font-size: 1.5rem;
    }

    .review-text {
      font-size: 0.8rem;
      max-height: 180px;
      -webkit-line-clamp: 9;
    }

    .review-footer {
      flex-direction: column;
      text-align: center;
    }

    .nav-btn {
      width: 40px;
      height: 40px;
      font-size: 1.2rem;
    }

    .nav-prev {
      left: -20px;
    }

    .nav-next {
      right: -20px;
    }

    .reviews-summary {
      padding: 2rem 1rem;
    }

    .summary-stats {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .stat-number {
      font-size: 2rem;
    }
  }

  /* Dodatkowe style dla bardzo małych ekranów */
  @media (max-width: 480px) {
    .reviews-container {
      height: 400px;
      margin: 0 0.5rem;
    }

    .review-slide {
      padding: 2rem 1rem;
    }

    .quote-icon {
      font-size: 2.5rem;
    }

    .stars {
      font-size: 1.3rem;
    }

    .review-text {
      font-size: 0.8rem;
      max-height: 250px;
      -webkit-line-clamp: 12;
    }

    .review-author strong {
      font-size: 1.1rem;
    }

    .author-info {
      font-size: 0.9rem;
    }

    .nav-btn {
      width: 35px;
      height: 35px;
      font-size: 1rem;
    }

    .nav-prev {
      left: -17px;
    }

    .nav-next {
      right: -17px;
    }

    .reviews-summary {
      padding: 1.5rem 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const reviewsContainer = document.getElementById('reviews-container');
    const indicators = document.querySelectorAll('.indicator');
    const reviewSlides = document.querySelectorAll('.review-slide');
    const navPrev = document.getElementById('nav-prev');
    const navNext = document.getElementById('nav-next');
    
    if (!reviewsContainer || reviewSlides.length <= 1) return;
    
    let currentSlide = 0;
    const totalSlides = reviewSlides.length;
    let autoSlideInterval: NodeJS.Timeout | undefined;
    let isPaused = false;
    let isAnimating = false;
    
    // Funkcja do pokazania określonego slajdu
    function showSlide(slideIndex: number, direction: 'next' | 'prev' = 'next'): void {
      if (isAnimating) return;
      isAnimating = true;
      
      const currentSlideElement = reviewSlides[currentSlide] as HTMLElement;
      const nextSlideElement = reviewSlides[slideIndex] as HTMLElement;
      
      // Animacja wyjścia obecnego slajdu
      currentSlideElement.style.transform = direction === 'next' ? 'translateX(-100px)' : 'translateX(100px)';
      currentSlideElement.style.opacity = '0';
      
      // Przygotuj nowy slajd
      nextSlideElement.style.transform = direction === 'next' ? 'translateX(100px)' : 'translateX(-100px)';
      nextSlideElement.style.opacity = '0';
      nextSlideElement.classList.add('active');
      
      // Animacja wejścia nowego slajdu
      setTimeout(() => {
        nextSlideElement.style.transform = 'translateX(0)';
        nextSlideElement.style.opacity = '1';
      }, 50);
      
      // Ukryj poprzedni slajd po animacji
      setTimeout(() => {
        currentSlideElement.classList.remove('active');
        currentSlideElement.style.transform = 'translateX(100px)';
        isAnimating = false;
      }, 600);
      
      // Zaktualizuj wskaźniki
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === slideIndex);
      });
      
      currentSlide = slideIndex;
    }
    
    // Funkcja do następnego slajdu
    function nextSlide(): void {
      const nextIndex = (currentSlide + 1) % totalSlides;
      showSlide(nextIndex, 'next');
    }
    
    // Funkcja do poprzedniego slajdu
    function prevSlide(): void {
      const prevIndex = (currentSlide - 1 + totalSlides) % totalSlides;
      showSlide(prevIndex, 'prev');
    }
    
    // Automatyczne przełączanie co 12 sekund
    function startAutoSlide(): void {
      if (autoSlideInterval) clearInterval(autoSlideInterval);
      autoSlideInterval = setInterval(() => {
        if (!isPaused && !isAnimating) {
          nextSlide();
        }
      }, 12000);
    }
    
    // Obsługa przycisków nawigacji
    if (navNext) {
      navNext.addEventListener('click', () => {
        nextSlide();
        startAutoSlide(); // Restart timer
      });
    }
    
    if (navPrev) {
      navPrev.addEventListener('click', () => {
        prevSlide();
        startAutoSlide(); // Restart timer
      });
    }
    
    // Obsługa kliknięć wskaźników
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        if (index !== currentSlide) {
          const direction = index > currentSlide ? 'next' : 'prev';
          showSlide(index, direction);
          startAutoSlide(); // Restart timer
        }
      });
    });
    
    // Pauza przy hover na kontenerze opinii
    if (reviewsContainer) {
      reviewsContainer.addEventListener('mouseenter', () => {
        isPaused = true;
      });
      
      reviewsContainer.addEventListener('mouseleave', () => {
        isPaused = false;
      });
    }
    
    // Obsługa klawiatury
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
        startAutoSlide();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
        startAutoSlide();
      }
    });
    
    // Uruchom automatyczne przełączanie
    if (totalSlides > 1) {
      startAutoSlide();
    }
  });
</script>
